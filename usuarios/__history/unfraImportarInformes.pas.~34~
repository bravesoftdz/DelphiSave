unit unfraImportarInformes;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes,
  Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ActnList, Vcl.Mask,
  Vcl.StdCtrls, Vcl.ExtCtrls, FolderDialog;

type
  TfraImportarInformes = class(TFrame)
    Bevel2: TBevel;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    btnCancelar: TButton;
    btnProcesar: TButton;
    edOrigenDir: TEdit;
    edDestinoDir: TEdit;
    edMaskPeriodo: TMaskEdit;
    btBuscarOrigen: TButton;
    btBuscarDestino: TButton;
    ActionList1: TActionList;
    acBuscarOrigen: TAction;
    acBuscarDestino: TAction;
    acCancelar: TAction;
    acProcesar: TAction;
    fdSelectDir: TFolderDialog;
    procedure acBuscarOrigenExecute(Sender: TObject);
    procedure acBuscarDestinoExecute(Sender: TObject);
    procedure acProcesarExecute(Sender: TObject);
    procedure acCancelarExecute(Sender: TObject);
    procedure btnProcesarClick(Sender: TObject);
  private
    FinfoModalresult: TModalResult;
    FinfoDirDestino: string;
    FinfoDirOrigen: string;
    FinfoPerdiodo: Integer;
    { Private declarations }
    function ElegirDirectorio(subtitulo, directorio: string) : string;
    procedure CargarEtiqueta;
    function ProbableEtiqueta(pathfile: string): string;
    procedure InicializarControles;
    function Validation: Boolean;
  public
    { Public declarations }
    property infoModalresult: TModalResult read FinfoModalresult;
    property infoDirOrigen: string read FinfoDirOrigen;
    property infoDirDestino: string read FinfoDirDestino;
    property infoPerdiodo: Integer read FinfoPerdiodo;
  end;

implementation

{$R *.dfm}

resourcestring
  sImportarArchiosStart = 'Se van a Importar los archivos del CD a el repositorio';
  sMensajeEtiquetaNot = 'La etiqueta [%s] es incorrecta';
  sMensajeDirBlank = 'Debe seleccionar un directorio %s valido';
  sMensajeDirNot = 'El directorio (%s) No existe o es incorrecto';
  sMensajeDirError = 'Posiblemente el directorio %s No es Correcto';
  stxtDirDestino = 'Directorio Destino';
  stxtDirOrigen = 'Directorio Origen';
  sPosibleEtiqueta = 'Posible Etiqueta [%s] se deduce de el path [%s].';
  sNoPudoCopiar = 'No se pudo copiar el archivo: (%s) ';
  stxtDirectorio = 'Directorio %s ';
  sNoPudoCrear = 'No se pudo crear el directorio: ';
  sCopiarDirectorios = 'Se van a copiar todos los archivos de %s a %s ' + #13 + '¿Quiere copiar estos Archivos?';
  sDirLogCopia = 'Directorio Origen %s... Destino %s ';
  sDirLogNumContrato = 'Numero de contrato invalido : ';
  sDirERRORLogDir = 'ERROR : Directorio Origen %s... Destino %s ';
  sSaveLogFile = '¿Desea Guardar el log de archivos procesados?';

procedure TfraImportarInformes.acBuscarDestinoExecute(Sender: TObject);
begin
  edDestinoDir.Text := ElegirDirectorio(stxtDirDestino, edDestinoDir.Text);
end;

procedure TfraImportarInformes.acBuscarOrigenExecute(Sender: TObject);
begin
  edOrigenDir.Text := ElegirDirectorio(stxtDirOrigen, edOrigenDir.Text);
  CargarEtiqueta;
end;

procedure TfraImportarInformes.acCancelarExecute(Sender: TObject);
begin
  InicializarControles;
  FinfoModalresult := mrCancel;
  FinfoDirOrigen := EmptyStr;
  FinfoDirDestino := EmptyStr;
  FinfoPerdiodo := 0;
  Visible := False;
end;

procedure TfraImportarInformes.acProcesarExecute(Sender: TObject);
begin
  FinfoModalresult := mrOk;
  FinfoDirOrigen := edOrigenDir.Text;
  FinfoDirDestino := edDestinoDir.Text;
  FinfoPerdiodo := StrToIntDef(edMaskPeriodo.Text, 0);

  if not Validation then
      FinfoModalresult := mrCancel;

  Visible := False;
end;

procedure TfraImportarInformes.CargarEtiqueta;
var
  sNombreEtiqueta: string;

  function GetLabelCD: Char;
  var
    drivemap, mask: DWORD;
    i: integer;
    root: string;
  begin
    Result := #0;
    root := 'A:\';
    drivemap := GetLogicalDrives;
    mask := 1;

    for i := 1 to 32 do
    begin
      if (mask and drivemap) <> 0 then
        if GetDriveType(PChar(root)) = DRIVE_CDROM then
        begin
          Result := root[1];
          Break;
        end;
      mask := mask shl 1;
      Inc(root[1]);
    end;
  end;

  function GetCDLabel(Drive: string): string;
  var
    VolumeName: array[0..255] of Char;
    FileSystemType: array[0..255] of Char;
    SerialNum: DWORD;
    MaxFilenameLength: DWORD;
    Flags: DWORD;
  begin
    if (GetVolumeInformation(
      PChar(Drive),
      VolumeName,
      256,
      @SerialNum,
      MaxFilenameLength,
      Flags,
      FileSystemType,
      256)) then Result:=VolumeName
    else Result:='No CD Present';
  end;

  function BuscarLabelCD: string;
  var
    sDrive: string;
  begin
    sDrive := GetLabelCD +':\';
    Result := GetCDLabel(sDrive);
  end;

begin

  sNombreEtiqueta := ProbableEtiqueta(edOrigenDir.Text);

  if Trim(sNombreEtiqueta) = EmptyStr then
  begin
    sNombreEtiqueta := BuscarLabelCD;
    sNombreEtiqueta :=  ProbableEtiqueta(sNombreEtiqueta);
  end;

  edMaskPeriodo.Text := Trim(sNombreEtiqueta);
  edMaskPeriodo.Hint := Format(sPosibleEtiqueta, [edMaskPeriodo.Text,edOrigenDir.Text]);
  //if Trim(edPeriodo.Text) <> EmptyStr then  ShowMessage(edPeriodo.Hint);

end;

function TfraImportarInformes.ElegirDirectorio(subtitulo, directorio: string): string;
begin
  if not DirectoryExists(directorio) then
    directorio := GetCurrentDir;
  fdSelectDir.Directory := directorio;
  fdSelectDir.Caption := subtitulo;
  if fdSelectDir.Execute then
    Result := fdSelectDir.Directory;
end;

procedure TfraImportarInformes.InicializarControles;
begin
  edOrigenDir.Clear;
  edDestinoDir.Text := '\\ntintraweb\Storage_Data\Web\Informes_Ingenieria_Siniestralidad_Desarrollo';
  edMaskPeriodo.Clear;
  FinfoModalresult := mrNone;
end;

function TfraImportarInformes.ProbableEtiqueta(pathfile: string): string;
var
  i: Integer;
  sl, syear, smonth: String;
const
  meses: array [1..12] of String = ('ENERO', 'FEBRERO', 'MARZO', 'ABRIL', 'MAYO',
      'JUNIO', 'JULIO','AGOSTO','SEPTIEMBRE', 'OCTURBRE','NOVIEMBRE','DICIEMBRE');
begin

  for i := 2000 to (CurrentYear + 1) do
  begin
    if AnsiPos(UpperCase(IntToStr(i)), UpperCase(pathfile) ) > 0  then
      syear := IntToStr(i);
  end;

  for i := 1 to 12 do
  begin
    if AnsiPos(UpperCase(meses[I]), UpperCase(pathfile) ) > 0 then
    begin
      sl := Trim('0' + IntToStr(i));
      SetLength( sl , 2 );
      smonth := sl;
    end;
  end;

  if ((syear = EmptyStr) or (smonth = EmptyStr)) then
    ShowMessage(Format(sMensajeDirError,[pathfile]));

  Result := syear + smonth
end;

function TfraImportarInformes.Validation: Boolean;
begin

  Result := True;

  If(not DirectoryExists(edOrigenDir.Text) ) then
  begin
    if Trim(edOrigenDir.Text) = EmptyStr then
      MessageDlg(Format(sMensajeDirBlank, ['Origen']),mtError,[mbYes], 0)
    else
      MessageDlg(Format(sMensajeDirNot, [edOrigenDir.Text]),mtError,[mbYes], 0);
    Result := False;
  end;

  If (result and (not DirectoryExists(edDestinoDir.Text) ) )then
  begin
    if Trim(edDestinoDir.Text) = EmptyStr then
      MessageDlg(Format(sMensajeDirBlank, ['Destino']),mtError,[mbYes], 0)
    else
      MessageDlg(Format(sMensajeDirNot, [edDestinoDir.Text]),mtError,[mbYes], 0);
    Result := False;
  end;

  If (Result and (Trim(edMaskPeriodo.Text) = EmptyStr) or (Length(Trim(edMaskPeriodo.Text))< 6) )then
  begin
    MessageDlg(Format(sMensajeEtiquetaNot, [edMaskPeriodo.Text]),mtError,[mbYes], 0);
    if edMaskPeriodo.CanFocus then edMaskPeriodo.SetFocus;
    Result := False;
  end;
end;

end.
